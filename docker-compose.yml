x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'


version: '3.8'

services:
  backend:
    container_name: backend
    build: ./backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - internal-network
      - default
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      DATABASE_URL: ${DATABASE_URL}
      TASK_RUNNER_DATABASE_URL: ${TASK_RUNNER_DATABASE_URL}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALGORITHM: ${ALGORITHM}
      SECRET_KEY: ${SECRET_KEY}
    restart: unless-stopped
    volumes:
      - ./backend:/app
    logging: *default-logging
    depends_on:
      - loki

  db:
    networks:
      - internal-network
      - default
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      interval: 5s
      retries: 10
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    image: postgres:14.1-alpine
    ports:
      - '5432:5432'
    restart: unless-stopped
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d/

  redis:
    image: redis:7.0.7-alpine
    ports:
      - "6379"
    command: redis-server --loglevel verbose
    restart: unless-stopped

  scheduler:
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      TASK_RUNNER_DATABASE_URL: ${TASK_RUNNER_DATABASE_URL}
      DATABASE_URL: ${DATABASE_URL}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALGORITHM: ${ALGORITHM}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - redis
    build:
      context: ./backend
    command: celery -A app.utils.worker worker -B --loglevel=info
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping"]
    volumes:
      - ./backend:/app

  scheduler-gui:
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
    links:
      - scheduler
    ports:
      - "5555:5555"
    depends_on:
      scheduler:
        condition: service_healthy
    image: mher/flower:1.2.0
    restart: unless-stopped

  caddy:
     image: caddy:2.6.2-alpine
     networks:
       - internal-network
       - default
     ports:
       - '80:80'
       - '443:443'
       - '8000:8000'
       - '9000:9000'
     environment:
       BACKEND_URL: ${BACKEND_URL}
       BACKEND_CONTAINER_URL: ${BACKEND_CONTAINER_URL}
       DEBUG_URL: ${DEBUG_URL}
       DEBUG_CONTAINER_URL: ${DEBUG_CONTAINER_URL}
     volumes:
       - ./Caddyfile:/etc/caddy/Caddyfile
       - caddy_data:/data
       - caddy_config:/config

  loki:
    image: grafana/loki:2.9.3
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki


  prometheus:
    image: prom/prometheus:v2.48.1
    ports:
      - "9090:9090"
    volumes:
      - ./backend/etc/prometheus:/workspace
      - prometheus_data:/prometheus
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging


  tempo:
    image: grafana/tempo:2.3.1
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - "3000:3000"
    volumes:
      - ./backend/etc/grafana/:/etc/grafana/provisioning/datasources
      - ./backend/etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./backend/etc/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    logging: *default-logging

volumes:
  caddy_config: null
  caddy_data: null
  prometheus_data: {}
  loki_data: {}

networks:
  internal-network:
    name: internal-network
    driver: bridge

